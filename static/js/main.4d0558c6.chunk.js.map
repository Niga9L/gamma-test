{"version":3,"sources":["context/desktops/desktopContext.js","context/desktops/desktopReducer.js","context/types.js","context/desktops/desktopState.js","components/Navbar.js","containers/Rnd.js","components/ChangeMenu.js","views/Desktop.js","containers/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["DesktopContext","createContext","handlers","state","action","widgetState","desktopState","currentDesktop","id","desktopReducer","type","DEFAULT","getRandomId","max","Date","getTime","toString","Math","floor","random","DesktopState","children","initialState","desktopId","name","objectId","desktopPosition","width","height","x","y","useReducer","dispatch","Provider","value","changeDesktop","root","map","n","ADD_NUMBER","changePosition","position","changeSize","size","changeDesktopName","node","addNewDesktop","changeCurrentDesktop","Navbar","useContext","useState","input","changeInput","onClickHandler","event","target","getAttribute","className","placeholder","onChange","onKeyPress","key","data-id","onClick","Icon","style","border","background","ResDrag","props","onDragStop","e","d","newPosition","onResizeStop","direction","ref","delta","newSize","default","bounds","ChangeMenu","anchorEl","setAnchorEl","handleClose","Button","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","open","Boolean","onClose","el","MenuItem","onSwapHandler","Desktop","click","setClick","widgetId","Dashboard","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d0558c6.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nexport const DesktopContext= createContext()","import {ADD_DESKTOP, ADD_NUMBER, CHANGE_DESKTOP, CHANGE_NAME} from \"../types\";\n\nconst handlers = {\n    [ADD_NUMBER]: (state, action) => ({...state, widgetState: action.widgetState}),\n    [CHANGE_NAME]: (state, action) => ({...state, desktopState: action.desktopState}),\n    [ADD_DESKTOP]: (state, action) => ({...state, desktopState: action.desktopState}),\n    [CHANGE_DESKTOP]: (state, action) => ({...state, currentDesktop: action.id}),\n    DEFAULT: state => state\n}\n\nexport const desktopReducer = (state, action) => {\n    const handler = handlers[action.type] || handlers.DEFAULT\n    return handler(state, action)\n}","export const ADD_NUMBER = 'ADD_NUMBER'\r\nexport const CHANGE_NAME = 'CHANGE_NAME'\r\nexport const ADD_DESKTOP = 'ADD_DESKTOP'\r\nexport const CHANGE_DESKTOP = 'CHANGE_DESKTOP'","import React, {useReducer} from \"react\";\nimport {DesktopContext} from './desktopContext'\nimport {desktopReducer} from \"./desktopReducer\";\nimport {ADD_DESKTOP, ADD_NUMBER, CHANGE_DESKTOP, CHANGE_NAME} from \"../types\";\n\nconst getRandomId = max => {\n  return new Date().getTime().toString() + Math.floor(Math.random() * Math.floor(max))\n}\n\nexport const DesktopState = ({children}) => {\n  const initialState = {\n    desktopState: [\n      {\n        desktopId:  new Date().getTime().toString(),\n        name: 'Мой рабочий стол'\n      },\n      {\n        desktopId: getRandomId(20),\n        name: 'Рабочий стол 2'\n      }\n    ],\n    widgetState: [\n      {\n        objectId: getRandomId(100),\n        desktopPosition: new Date().getTime().toString(),\n        width: 650,\n        height: 380,\n        x: 100,\n        y: 250\n      },\n      {\n        objectId: getRandomId(100),\n        desktopPosition: new Date().getTime().toString(),\n        width: 550,\n        height: 300,\n        x: 1000,\n        y: 150\n      }\n    ],\n    currentDesktop: new Date().getTime().toString()\n  }\n  const [state, dispatch] = useReducer(desktopReducer, initialState)\n\n  const changeDesktop = (id, root) => {\n    const widgetState = [...state.widgetState].map(n => {\n      if (n.objectId === root) {\n        n.desktopPosition = id\n      }\n      return n\n    })\n\n    dispatch({\n      ADD_NUMBER,\n      widgetState\n    })\n  }\n  const changePosition = (id, position) => {\n    const widgetState = [...state.widgetState].map(n => {\n      if (n.objectId === id) {\n        n.x = position.x\n        n.y = position.y\n      }\n      return n\n    })\n\n    dispatch({\n      type: ADD_NUMBER,\n      widgetState\n    })\n  }\n\n  const changeSize = (id, size, position) => {\n    const widgetState = [...state.widgetState].map(n => {\n      if (n.objectId === id) {\n        n.width = size.width\n        n.height = size.height\n        n.x = position.x\n        n.y = position.y\n      }\n      return n\n    })\n\n    dispatch({\n      type: ADD_NUMBER,\n      widgetState\n    })\n  }\n\n  const changeDesktopName = (name, id) => {\n    const desktopState = [...state.desktopState].map(node => {\n      if (node.desktopId === id){\n        node.name = name\n      }\n      return node\n    })\n    dispatch({\n      type: CHANGE_NAME,\n      desktopState\n    })\n  }\n\n  const addNewDesktop = () => {\n    const desktopState = [...state.desktopState, {\n      desktopId: getRandomId(20),\n      name: 'Новый рабочий стол'\n    }]\n    dispatch({\n      type: ADD_DESKTOP,\n      desktopState\n    })\n  }\n\n  const changeCurrentDesktop = id => {\n    dispatch({\n      type: CHANGE_DESKTOP,\n      id\n    })\n  }\n\n  return (\n    <DesktopContext.Provider\n      value={{\n        state,\n        changeDesktop,\n        changePosition,\n        changeSize,\n        changeDesktopName,\n        addNewDesktop,\n        changeCurrentDesktop\n      }}>\n      {children}\n    </DesktopContext.Provider>\n  )\n}","import React, {useContext, useState} from \"react\";\nimport {DesktopContext} from \"../context/desktops/desktopContext\";\nimport Icon from '@material-ui/core/Icon';\n\nexport const Navbar = () => {\n  const {state, changeDesktopName, addNewDesktop, changeCurrentDesktop} = useContext(DesktopContext)\n  const {desktopState, currentDesktop} = state\n  const [input, changeInput] = useState('')\n\n  const onPressHandler = event => {\n    if (event.key === 'Enter') {\n      changeDesktopName(input, currentDesktop)\n      event.target.value = ''\n    }\n  }\n\n  const onClickHandler = event => {\n    const id = event.target.getAttribute('data-id')\n    changeCurrentDesktop(id)\n  }\n\n  return (\n    <nav className='navbar'>\n      <div className=\"dashboard-head\">\n        <input\n          className='dashboard-head-name'\n          placeholder='Изменить название'\n          value={input}\n          onChange={event => changeInput(event.target.value)}\n          onKeyPress={onPressHandler}\n          type=\"text\"/>\n      </div>\n      <ul className=\"navbar-nav\">\n        {\n          desktopState.map(node => {\n            return (\n              <li key={node.desktopId}>\n                <span className=\"nav-item\" data-id={node.desktopId} onClick={onClickHandler}>{node.name}</span>\n              </li>\n            )\n          })\n        }\n        <Icon className='icon' onClick={addNewDesktop}>add_circle</Icon>\n      </ul>\n    </nav>\n  )\n}\n","import React, {useContext} from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport {DesktopContext} from \"../context/desktops/desktopContext\";\n\nconst style = {\n    border: \"solid 1px #ddd\",\n    background: \"#D6FF79\",\n};\n\nexport const ResDrag = props => {\n  const {changePosition, changeSize} = useContext(DesktopContext)\n\n\n  return(\n    <Rnd\n      style={style}\n      onDragStop={(e, d) => {\n        const newPosition = {x: d.x, y: d.y}\n        changePosition(props.id, newPosition)\n      }}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        const newSize = {width: ref.style.width, height: ref.style.height}\n        changeSize(props.id, newSize, position)\n      }}\n      default={{\n        x: props.x,\n        y: props.y,\n        width: props.width,\n        height: props.height\n      }}\n      bounds=\".container\"\n    >\n      {props.children}\n    </Rnd>\n  )\n\n}","import React, {useContext, useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {DesktopContext} from \"../context/desktops/desktopContext\";\r\n\r\nexport const ChangeMenu = props => {\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const {state} = useContext(DesktopContext)\r\n\r\n  const {desktopState} = state\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  return (\r\n    <div className=\"rnd-menu\">\r\n      <div className=\"menu-changer\">\r\n        <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n          <Icon className='changer'>swap_horiz</Icon>\r\n        </Button>\r\n        <Menu\r\n          id='simple'\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}\r\n        >\r\n          {\r\n            desktopState.map(el => {\r\n              return (\r\n                <MenuItem\r\n                  key={el.desktopId}\r\n                  data-id={el.desktopId}\r\n                  onClick={e => {props.onSwapHandler(el.desktopId, props.id)\r\n                    handleClose()\r\n                  }}\r\n                >\r\n                  {el.name}\r\n                </MenuItem>\r\n              )\r\n            })\r\n          }\r\n        </Menu>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, {useContext, useState} from \"react\";\nimport {DesktopContext} from \"../context/desktops/desktopContext\";\nimport {ResDrag} from \"../containers/Rnd\";\nimport {ChangeMenu} from \"../components/ChangeMenu\";\n\n\nexport const Desktop = () => {\n  const {state, changeDesktop} = useContext(DesktopContext)\n  const [click, setClick] = useState(true)\n\n  const {widgetState, currentDesktop} = state\n\n  const onSwapHandler = (desktopId, widgetId) => {\n    changeDesktop(desktopId, widgetId)\n    setClick(!click)\n  }\n\n  return (\n    <>\n      {/* eslint-disable-next-line array-callback-return */}\n      {widgetState.map((node) => {\n        if (node.desktopPosition === currentDesktop) {\n          return (\n            <ResDrag width={node.width} height={node.height} x={node.x} y={node.y} id={node.objectId} key={node.objectId}>\n              <ChangeMenu id={node.objectId} onSwapHandler={onSwapHandler}/>\n            </ResDrag>\n          )\n        }\n      })}\n    </>\n  )\n}","import React from \"react\";\r\nimport {Navbar} from \"../components/Navbar\";\r\nimport {Desktop} from \"../views/Desktop\";\r\n\r\nexport const Dashboard = props => {\r\n\r\n  return (\r\n    <>\r\n      <Navbar/>\r\n      <div className=\"container\">\r\n        <Desktop/>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React from 'react';\nimport {DesktopState} from \"./context/desktops/desktopState\";\nimport {Dashboard} from \"./containers/Dashboard\";\n\n\nfunction App() {\n\n  return (\n      <DesktopState>\n        <Dashboard/>\n      </DesktopState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}