{"version":3,"sources":["context/desktops/desktopContext.js","context/desktops/desktopReducer.js","context/types.js","context/desktops/desktopState.js","components/DesktopMenu.js","components/Navbar.js","containers/Rnd.js","components/ChangeMenu.js","views/Desktop.js","containers/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["DesktopContext","createContext","handlers","state","action","widgetState","desktopState","currentDesktop","id","desktopReducer","type","DEFAULT","getRandomId","max","Date","getTime","toString","Math","floor","random","DesktopState","children","initialState","desktopId","name","objectId","desktopPosition","width","height","x","y","useReducer","dispatch","Provider","value","changeDesktop","root","map","n","ADD_NUMBER","changePosition","position","changeSize","size","changeDesktopName","node","addNewDesktop","changeCurrentDesktop","deleteDesktop","filter","item","DesktopMenu","useContext","useState","list","setList","isDoubleClick","setClick","input","changeInput","onCloseHandler","window","confirm","onPressHandler","event","key","target","useEffect","className","data-id","onDoubleClick","Icon","onClick","e","onChange","onKeyPress","getAttribute","onClickHandler","Navbar","style","border","background","ResDrag","props","onDragStop","d","newPosition","onResizeStop","direction","ref","delta","newSize","default","bounds","ChangeMenu","anchorEl","setAnchorEl","handleClose","Button","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","open","Boolean","onClose","el","MenuItem","onSwapHandler","Desktop","click","widgetId","Dashboard","App","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4a3238b.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nexport const DesktopContext= createContext()","import {ADD_DESKTOP, ADD_NUMBER, CHANGE_DESKTOP, CHANGE_NAME} from \"../types\";\n\nconst handlers = {\n    [ADD_NUMBER]: (state, action) => ({...state, widgetState: action.widgetState}),\n    [CHANGE_NAME]: (state, action) => ({...state, desktopState: action.desktopState}),\n    [ADD_DESKTOP]: (state, action) => ({...state, desktopState: action.desktopState}),\n    [CHANGE_DESKTOP]: (state, action) => ({...state, currentDesktop: action.id}),\n    DEFAULT: state => state\n}\n\nexport const desktopReducer = (state, action) => {\n    const handler = handlers[action.type] || handlers.DEFAULT\n    return handler(state, action)\n}","export const ADD_NUMBER = 'ADD_NUMBER'\r\nexport const CHANGE_NAME = 'CHANGE_NAME'\r\nexport const ADD_DESKTOP = 'ADD_DESKTOP'\r\nexport const CHANGE_DESKTOP = 'CHANGE_DESKTOP'","import React, {useReducer} from \"react\";\nimport {DesktopContext} from './desktopContext'\nimport {desktopReducer} from \"./desktopReducer\";\nimport {ADD_DESKTOP, ADD_NUMBER, CHANGE_DESKTOP, CHANGE_NAME} from \"../types\";\n\nconst getRandomId = max => {\n  return new Date().getTime().toString() + Math.floor(Math.random() * Math.floor(max))\n}\n\nexport const DesktopState = ({children}) => {\n  const initialState = {\n    desktopState: [\n      {\n        desktopId:  new Date().getTime().toString(),\n        name: 'Мой рабочий стол'\n      },\n      {\n        desktopId: getRandomId(20),\n        name: 'Рабочий стол 2'\n      }\n    ],\n    widgetState: [\n      {\n        objectId: getRandomId(100),\n        desktopPosition: new Date().getTime().toString(),\n        width: 650,\n        height: 380,\n        x: 100,\n        y: 250\n      },\n      {\n        objectId: getRandomId(100),\n        desktopPosition: new Date().getTime().toString(),\n        width: 550,\n        height: 300,\n        x: 1000,\n        y: 150\n      }\n    ],\n    currentDesktop: new Date().getTime().toString()\n  }\n  const [state, dispatch] = useReducer(desktopReducer, initialState)\n\n  const changeDesktop = (id, root) => {\n    const widgetState = [...state.widgetState].map(n => {\n      if (n.objectId === root) {\n        n.desktopPosition = id\n      }\n      return n\n    })\n\n    dispatch({\n      ADD_NUMBER,\n      widgetState\n    })\n  }\n  const changePosition = (id, position) => {\n    const widgetState = [...state.widgetState].map(n => {\n      if (n.objectId === id) {\n        n.x = position.x\n        n.y = position.y\n      }\n      return n\n    })\n\n    dispatch({\n      type: ADD_NUMBER,\n      widgetState\n    })\n  }\n\n  const deleteDesktop = id => {\n    const desktopState = [...state.desktopState].filter(item => item.desktopId !== id)\n\n    dispatch({\n      type: ADD_DESKTOP,\n      desktopState\n    })\n  }\n\n  const changeSize = (id, size, position) => {\n    const widgetState = [...state.widgetState].map(n => {\n      if (n.objectId === id) {\n        n.width = size.width\n        n.height = size.height\n        n.x = position.x\n        n.y = position.y\n      }\n      return n\n    })\n\n    dispatch({\n      type: ADD_NUMBER,\n      widgetState\n    })\n  }\n\n  const changeDesktopName = (name, id) => {\n    const desktopState = [...state.desktopState].map(node => {\n      if (node.desktopId === id){\n        node.name = name\n      }\n      return node\n    })\n    dispatch({\n      type: CHANGE_NAME,\n      desktopState\n    })\n  }\n\n  const addNewDesktop = () => {\n    const desktopState = [...state.desktopState, {\n      desktopId: getRandomId(20),\n      name: 'Новый рабочий стол'\n    }]\n    dispatch({\n      type: ADD_DESKTOP,\n      desktopState\n    })\n  }\n\n  const changeCurrentDesktop = id => {\n    dispatch({\n      type: CHANGE_DESKTOP,\n      id\n    })\n  }\n\n  return (\n    <DesktopContext.Provider\n      value={{\n        state,\n        changeDesktop,\n        changePosition,\n        changeSize,\n        changeDesktopName,\n        addNewDesktop,\n        changeCurrentDesktop,\n        deleteDesktop\n      }}>\n      {children}\n    </DesktopContext.Provider>\n  )\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {ReactSortable} from \"react-sortablejs\";\r\nimport {DesktopContext} from \"../context/desktops/desktopContext\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\n\r\nexport const DesktopMenu = () => {\r\n  const {state, changeCurrentDesktop, addNewDesktop, deleteDesktop, changeDesktopName} = useContext(DesktopContext)\r\n\r\n  const [list, setList] = useState(state.desktopState);\r\n  const [isDoubleClick, setClick] = useState(true)\r\n  const [input, changeInput] = useState('')\r\n\r\n  const {currentDesktop} = state\r\n\r\n\r\n  const onClickHandler = event => {\r\n    if (!isDoubleClick) {\r\n      setClick(!isDoubleClick)\r\n    }\r\n    const id = event.target.getAttribute('data-id')\r\n    changeCurrentDesktop(id)\r\n  }\r\n\r\n  const onCloseHandler = id => {\r\n    const doIt = window.confirm(\"Вы точно хотите закрыть рабочий стол?\")\r\n    if (doIt) {\r\n      deleteDesktop(id)\r\n    }\r\n  }\r\n\r\n  const onPressHandler = event => {\r\n    if (event.key === 'Enter') {\r\n      changeDesktopName(input, currentDesktop)\r\n      event.target.value = ''\r\n      if (!isDoubleClick) {\r\n        setClick(!isDoubleClick)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    setList(state.desktopState)\r\n  }, [state.desktopState])\r\n\r\n  return (\r\n    <div className=\"navbar-nav\">\r\n      <ReactSortable list={list} setList={setList} className=\"navbar-nav\">\r\n        {list.map(item => {\r\n          if (item.desktopId === currentDesktop) {\r\n            if (!isDoubleClick) {\r\n              return (\r\n                <input key={item.desktopId} type=\"text\"\r\n                       onChange={event => changeInput(event.target.value)}\r\n                       onKeyPress={onPressHandler}\r\n                />\r\n              )\r\n            } else {\r\n              return (\r\n                <div className='nav-items' key={item.desktopId}>\r\n                  <span\r\n                    className=\"nav-item\"\r\n                    data-id={item.desktopId}\r\n                    onDoubleClick={event => setClick(!isDoubleClick)}\r\n                  >\r\n                    {item.name}\r\n                  </span>\r\n                  <Icon className='icon close' onClick={e => onCloseHandler(item.desktopId)}>highlight_off</Icon>\r\n                </div>\r\n              )\r\n            }\r\n          } else {\r\n            return (\r\n              <div className='nav-items' key={item.desktopId}>\r\n                  <span\r\n                    className=\"nav-item\"\r\n                    data-id={item.desktopId}\r\n                    onClick={e => onClickHandler(e)}\r\n                  >\r\n                    {item.name}\r\n                  </span>\r\n                <Icon className='icon close' onClick={e => onCloseHandler(item.desktopId)}>highlight_off</Icon>\r\n              </div>\r\n            )\r\n          }\r\n        })\r\n        }\r\n      </ReactSortable>\r\n      <Icon className='icon' onClick={addNewDesktop}>add_circle</Icon>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\nimport {DesktopMenu} from \"./DesktopMenu\";\n\nexport const Navbar = () => {\n\n\n  return (\n    <nav className='navbar'>\n      <DesktopMenu />\n    </nav>\n  )\n}\n","import React, {useContext} from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport {DesktopContext} from \"../context/desktops/desktopContext\";\n\nconst style = {\n    border: \"solid 1px #ddd\",\n    background: \"#D6FF79\",\n};\n\nexport const ResDrag = props => {\n  const {changePosition, changeSize} = useContext(DesktopContext)\n\n\n  return(\n    <Rnd\n      style={style}\n      onDragStop={(e, d) => {\n        const newPosition = {x: d.x, y: d.y}\n        changePosition(props.id, newPosition)\n      }}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        const newSize = {width: ref.style.width, height: ref.style.height}\n        changeSize(props.id, newSize, position)\n      }}\n      default={{\n        x: props.x,\n        y: props.y,\n        width: props.width,\n        height: props.height\n      }}\n      bounds=\".container\"\n    >\n      {props.children}\n    </Rnd>\n  )\n\n}","import React, {useContext, useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {DesktopContext} from \"../context/desktops/desktopContext\";\r\n\r\nexport const ChangeMenu = props => {\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const {state} = useContext(DesktopContext)\r\n\r\n  const {desktopState} = state\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  return (\r\n    <div className=\"rnd-menu\">\r\n      <div className=\"menu-changer\">\r\n        <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n          <Icon className='changer'>swap_horiz</Icon>\r\n        </Button>\r\n        <Menu\r\n          id='simple'\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}\r\n        >\r\n          {\r\n            desktopState.map(el => {\r\n              return (\r\n                <MenuItem\r\n                  key={el.desktopId}\r\n                  data-id={el.desktopId}\r\n                  onClick={e => {props.onSwapHandler(el.desktopId, props.id)\r\n                    handleClose()\r\n                  }}\r\n                >\r\n                  {el.name}\r\n                </MenuItem>\r\n              )\r\n            })\r\n          }\r\n        </Menu>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, {useContext, useState} from \"react\";\nimport {DesktopContext} from \"../context/desktops/desktopContext\";\nimport {ResDrag} from \"../containers/Rnd\";\nimport {ChangeMenu} from \"../components/ChangeMenu\";\n\n\nexport const Desktop = () => {\n  const {state, changeDesktop} = useContext(DesktopContext)\n  const [click, setClick] = useState(true)\n\n  const {widgetState, currentDesktop} = state\n\n  const onSwapHandler = (desktopId, widgetId) => {\n    changeDesktop(desktopId, widgetId)\n    setClick(!click)\n  }\n\n  return (\n    <>\n      {/* eslint-disable-next-line array-callback-return */}\n      {widgetState.map((node) => {\n        if (node.desktopPosition === currentDesktop) {\n          return (\n            <ResDrag width={node.width} height={node.height} x={node.x} y={node.y} id={node.objectId} key={node.objectId}>\n              <ChangeMenu id={node.objectId} onSwapHandler={onSwapHandler}/>\n            </ResDrag>\n          )\n        }\n      })}\n    </>\n  )\n}","import React from \"react\";\r\nimport {Navbar} from \"../components/Navbar\";\r\nimport {Desktop} from \"../views/Desktop\";\r\n\r\nexport const Dashboard = props => {\r\n\r\n  return (\r\n    <>\r\n      <Navbar/>\r\n      <div className=\"container\">\r\n        <Desktop/>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React from 'react';\nimport {DesktopState} from \"./context/desktops/desktopState\";\nimport {Dashboard} from \"./containers/Dashboard\";\n\n\nfunction App() {\n\n  return (\n      <DesktopState>\n        <Dashboard/>\n      </DesktopState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}